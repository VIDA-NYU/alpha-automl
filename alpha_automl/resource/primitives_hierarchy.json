{
    "CATEGORICAL_ENCODER": [
        "sklearn.preprocessing.OneHotEncoder"
    ],
    "CLASSIFIER": [
        "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "sklearn.ensemble.BaggingClassifier",
        "sklearn.ensemble.ExtraTreesClassifier",
        "sklearn.ensemble.GradientBoostingClassifier",
        "sklearn.ensemble.RandomForestClassifier",
        "sklearn.naive_bayes.BernoulliNB",
        "sklearn.naive_bayes.GaussianNB",
        "sklearn.naive_bayes.MultinomialNB",
        "sklearn.neighbors.KNeighborsClassifier",
        "sklearn.linear_model.LogisticRegression",
        "sklearn.linear_model.PassiveAggressiveClassifier",
        "sklearn.linear_model.SGDClassifier",
        "sklearn.svm.LinearSVC",
        "sklearn.svm.SVC",
        "sklearn.tree.DecisionTreeClassifier",
        "xgboost.XGBClassifier",
	"imblearn.ensemble.RUSBoostClassifier",
	"imblearn.ensemble.BalancedRandomForestClassifier",
	"imblearn.ensemble.BalancedBaggingClassifier",
	"imblearn.ensemble.EasyEnsembleClassifier"
    ],
    "CLUSTERER": [
        "sklearn.cluster.KMeans",
        "sklearn.cluster.AgglomerativeClustering"
    ],
    "DATETIME_ENCODER": [
        "sklearn.preprocessing.OrdinalEncoder",
	    "alpha_automl.builtin_primitives.CyclicalFeature",
        "alpha_automl.builtin_primitives.Datetime64ExpandEncoder",
        "alpha_automl.builtin_primitives.DummyEncoder"
    ],
    "FEATURE_SCALER": [
        "sklearn.preprocessing.MaxAbsScaler",
        "sklearn.preprocessing.RobustScaler",
        "sklearn.preprocessing.StandardScaler"
    ],
    "FEATURE_SELECTOR": [
        "sklearn.feature_selection.GenericUnivariateSelect",
        "sklearn.feature_selection.SelectPercentile",
	"sklearn.feature_selection.SelectKBest"
    ],
    "IMPUTER": [
        "sklearn.impute.SimpleImputer"
    ],
    "REGRESSOR": [
        "sklearn.linear_model.ARDRegression",
        "sklearn.tree.DecisionTreeRegressor",
        "sklearn.ensemble.ExtraTreesRegressor",
        "sklearn.gaussian_process.GaussianProcessRegressor",
        "sklearn.ensemble.GradientBoostingRegressor",
        "sklearn.neighbors.KNeighborsRegressor",
        "sklearn.linear_model.Lars",
        "sklearn.linear_model.Lasso",
        "sklearn.linear_model.LassoCV",
        "sklearn.svm.LinearSVR",
        "sklearn.linear_model.PassiveAggressiveRegressor",
        "sklearn.ensemble.RandomForestRegressor",
        "sklearn.linear_model.Ridge",
        "sklearn.linear_model.SGDRegressor",
        "sklearn.svm.SVR",
        "sklearn.linear_model.BayesianRidge",
        "sklearn.linear_model.ElasticNet",
        "sklearn.linear_model.HuberRegressor",
        "sklearn.linear_model.LinearRegression",
        "sklearn.linear_model.RANSACRegressor",
        "sklearn.linear_model.RidgeCV",
        "sklearn.linear_model.TheilSenRegressor",
        "xgboost.XGBRegressor",
        "lightgbm.LGBMRegressor"
    ],
    "TEXT_ENCODER": [
        "sklearn.feature_extraction.text.CountVectorizer",
        "sklearn.feature_extraction.text.TfidfVectorizer"
    ],
    "IMAGE_ENCODER": [
        "alpha_automl.builtin_primitives.CLIPTransformer"
    ],
    "COLUMN_TRANSFORMER": [
        "sklearn.compose.ColumnTransformer"
    ],
    "TIME_SERIES_FORECAST": [
        "alpha_automl.builtin_primitives.ArimaEstimator",
        "alpha_automl.builtin_primitives.DeeparEstimator",
        "alpha_automl.builtin_primitives.NBEATSEstimator",
        "alpha_automl.builtin_primitives.NHITSEstimator"
    ],
    "OVERSAMPLE": [
	    "imblearn.over_sampling.BorderlineSMOTE",
	    "imblearn.over_sampling.KMeansSMOTE",
	    "imblearn.over_sampling.SMOTE"
    ]
}
